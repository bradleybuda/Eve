start path resolution
```
  match
     r = [#http-request]
     split[text:r.request.url token index, by:"/"]
  bind
     [#path index token]
     [#content-type suffix:"jpeg" type:"application/jpeg"]
     [#content-type suffix:"css" type:"text/css"]
     [#content-type suffix:"html" type:"text/html"]
```

complete! send reponse
```
  match
     [#http-request]
     [#path index token]
     final = [#path index: count[given :index] file]
     split[text:final.token by:"." token index]
     index = 2
     not(token = "eve")
     ct = [#content-type suffix:token]
  commit
     [#http-response
       body: file.body
       status:"200"
       reason:"OK"
       header:[Content-Type:ct.type]]
```

complete! send reponse
```
  match
     [#http-request]
     [#path index token]
     final = [#path index: count[given :index] file]
     split[text:final.token by:"." token index]
     index = 2
     not(token = "eve")
     ct = [#content-type suffix:token]
  commit
     [#http-response
       body: file.body
       status:"200"
       reason:"OK"
       header:[Content-Type:ct.type]]
```

no such file!
```
   match
      [#http-request]
      [#path index:f token]
      not([#path index:count[given: f] file])
   commit
      [#http-response
       status:"404"
       reason:"No such object"]
```

resolve a path
```
match
    p = [#path index]
    (file, ind) = if index = 1 then ([#root], 1)
                               else (p.file, index)
    npath = [#path index:(ind + 1)]
    c = file.child
    c.name = npath.token
bind
    path.file := c
```